import type { NextPage } from 'next';
import Router, { useRouter } from 'next/router';
import { useState, useRef } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../../styles/CreatePost.module.scss';
import { Editor } from '@tinymce/tinymce-react';

const Create: NextPage = () => {
  const [invalid, setInvalid] = useState(false);
  const [content, setContent] = useState('');

  const router = useRouter();
  const editorRef = useRef(null);

  const ISSERVER = typeof window === 'undefined';

  if (!ISSERVER) {
    const checkIfLoggedIn = (async () => {
      const res = await fetch('http://localhost:4000/user', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
      });
      const data = await res.json();
      if (!data) {
        router.push('/login');
      }
    })();
  }

  const handleSubmit = async (data: any) => {
    const title = data.title;
    const image = data.image || '';

    console.log(title.value, image.value, content);
    console.log(content);

    const response = await fetch('http://localhost:4000/posts', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        title: title.value,
        image: image.value,
      }),
    });
    const json = await response.json();

    if (json.user) {
      localStorage.setItem('token', json.token);
      router.push('/');
    } else {
      setInvalid(true);
    }
  };
  return (
    <>
      <Head>
        <title>Create Post</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <form
          className={styles.form}
          onSubmit={(e) => {
            e.preventDefault();
            handleSubmit(e.target);
          }}
          method="POST"
        >
          <h1>Create Blog Post</h1>
          <label htmlFor="title" className={styles.label}>
            Title <span className={styles.required}>*</span>
            <input type="title" id="title" className={styles.input} required />
          </label>
          <label htmlFor="image" className={styles.label}>
            Image URL (Optional)
            <input type="text" id="image" className={styles.input} />
          </label>
          <label htmlFor="content" className={styles.label}>
            Content <span className={styles.required}>*</span>
            <Editor
              textareaName="content"
              apiKey="43kem55nzyn2unpp405bl6tbi63lr06vcg3u0169qhwe0xpr"
              onInit={(evt, editor: any) => (editorRef.current = editor)}
              init={{
                height: 500,
                menubar: false,
              }}
              onEditorChange={(content, editor) => {
                setContent(content);
              }}
            />
            {invalid && (
              <p className={styles.error}>â€¢ Invalid title or content</p>
            )}
          </label>
          <button type="submit">Post</button>
        </form>
      </main>

      <footer></footer>
    </>
  );
};

export default Create;
