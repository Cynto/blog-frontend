import type { NextPage } from 'next';
import Router, { useRouter } from 'next/router';
import Link from 'next/link';
import { useState, useEffect } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Login.module.scss';
import { useSelector } from 'react-redux';
import dynamic from 'next/dynamic';
const DarkMode = dynamic(() => import('../components/DarkMode'), {
  ssr: false,
});
import UserObjectComponent from '../components/UserObjectComponent';

const Login: NextPage = () => {
  const [errors, setErrors] = useState<
    [
      {
        value: String;
        msg: String;
        param: String;
        location: String;
      }
    ]
  >([{ msg: '', value: '', param: '', location: '' }]);

  const userObj = useSelector((state: any) => state.userObj);

  const router = useRouter();

  const ISSERVER = typeof window === 'undefined';

  const handleSubmit = async (data: any) => {
    const email = data.email;
    const password = data.password;
    console.log(email.value, password.value);

    const response = await fetch(
      'https://bloggy-api-cynto.herokuapp.com/users/login',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: email.value.toLowerCase(),
          password: password.value,
        }),
      }
    );
    const json = await response.json();

    if (json.user) {
      localStorage.setItem('token', json.token);
      router.push('/');
    } else {
      setErrors(json.errors);
    }
  };

  const inputClass =
    'text-slate-800 grid grid-cols-2 gap-4 mb-4 w-full p-3 bg-slate-100 border-[1px] border-slate-300 dark:border-2  rounded-sm dark:border-slate-100 focus:outline-none focus:border-gray-900 dark:focus:border-black ';
  const labelClass = 'text-xl';

  useEffect(() => {
    if (userObj !== null && !userObj.initial && localStorage.getItem('token')) {
      router.push('/');
    }
  }, [userObj]);
  return (
    <>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <DarkMode />
      <UserObjectComponent />
      <main className="min-h-screen grid justify-center content-center relative text-slate-900">
        <Image
          src="/backgrounds/login_background.jpg"
          layout="fill"
          objectFit="cover"
          alt="background"
        />

        <form
          onSubmit={(e) => {
            e.preventDefault();
            handleSubmit(e.target);
          }}
          method="POST"
          className="z-[1] w-screen md:w-[40vw] lg:w-[30vw] max-w-[450px]  grid shadow-xl pt-10 px-10 pb-5 bg-white dark:bg-gray-800 text-slate-800 dark:text-slate-100"
          data-testid="login-form"
        >
          <label htmlFor="email" className={labelClass}>
            Email
            <input type="email" id="email" className={inputClass} required />
          </label>
          <label htmlFor="password" className={labelClass}>
            Password
            <input
              type="password"
              id="password"
              className={inputClass}
              required
            />
          </label>
          {errors[0].msg !== '' ? (
            <ul className="mt-0">
              {errors.map((error, index) => (
                <li key={index} className="text-red-700 mt-0 mb-1">
                  {' '}
                  {error.msg}
                </li>
              ))}
            </ul>
          ) : null}
          <button
            type="submit"
            className="mt-2 mb-2 bg-gray-800 hover:bg-gray-900 dark:bg-slate-100 dark:hover:bg-white dark:text-slate-800 text-slate-100 font-bold p-3 text-xl cursor-pointer"
            data-testid="login-button"
          >
            Log In
          </button>
          <p>
            Don&apos;t have an account?{' '}
            <Link href="/register">
              <a className="font-bold dark:text-white relative hover:after:scale-x-100 hover:after:origin-bottom-left after:content-{''} after:absolute after:w-full after:scale-x-0 after:h-0.5 after:bottom-0 after:left-0 after:bg-slate-900 dark:after:bg-white after:origin-bottom-right after:transition-transform after:duration-300 after:ease-out">
                Sign Up
              </a>
            </Link>
          </p>
          <p className="mt-1">
            Return to{' '}
            <Link href="/">
              <a className="font-bold dark:text-white relative hover:after:scale-x-100 hover:after:origin-bottom-left after:content-{''} after:absolute after:w-full after:scale-x-0 after:h-0.5 after:bottom-0 after:left-0 after:bg-slate-900 dark:after:bg-white after:origin-bottom-right after:transition-transform after:duration-300 after:ease-out">
                Home
              </a>
            </Link>
          </p>
        </form>
      </main>

      <footer></footer>
    </>
  );
};

export default Login;
